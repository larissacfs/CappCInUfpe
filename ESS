#include <LiquidCrystal.h>
#include <Keypad.h>
#include <SPI.h>
#include <SD.h>
#include <SoftwareSerial.h>
#include <string.h>

// pin 11 e 12 no arduino, TX e RX
SoftwareSerial esp8266(11,12); 

//Configura os pinos do Arduino para se comunicar com o LCD
LiquidCrystal lcd(8,7, 6, 5, 3, 2); 

int indice;
int estado = 13;
int num = 49;
int i = 1;
char key;
char exibir[100];
int tam = 100;
char IdAluno[20] = " ";
char codProva[20] = " ";
char codProva2[20] = " ";
char IdAluno2[20] = " ";
char login[20] = " ";
char senha[20] = " ";
bool flag = false;
String provaID = " ";
String respostas;
String nomeProva = " ";

//MEGA
byte row_pin[4] = {A8, A9, A10, A11};          // Pinos que estão ligados as linhas.
byte col_pin[4] = {A12, A13, A14, A15};        // Pinos que estão ligados as colunas.
//UNO
//byte row_pin[4] = {9, 13, A0, A1};          // Pinos que estão ligados as linhas.
//byte col_pin[4] = {A2, A3, A4, A5};        // Pinos que estão ligados as colunas.
const char keys1[4][4] =            // Mapa de teclas do teclado.
{         
  { '1', '2', '3', 'A' },
  { '4', '5', '6', 'B' },
  { '7', '8', '9', 'C' },
  { '/', '0', 'c', 'D' }
};

const char keys2[4][4] =           // Mapa de teclas do teclado.
{         
  { '1', '2', '3', 'A' },
  { '<', '5', '>', 'B' },
  { '7', '8', '9', 'C' },
  { '/', '0', 'E', 'D' }
};

Keypad keypad1 = Keypad(makeKeymap(keys1), row_pin, col_pin, 4, 4);
Keypad keypad2 = Keypad(makeKeymap(keys2), row_pin, col_pin, 4, 4);

String sendData(String command, const int timeout, boolean debug)
{
    String response = "";
    esp8266.print(command); // send the read character to the esp8266
    long int time = millis();
    while( (time+timeout) > millis())
    {
      while(esp8266.available())
      {
        // The esp has data so display its output to the serial window 
        char c = esp8266.read(); // read the next character.
        response+=c;
      }  
    }
    if(debug)
    {
      Serial.print(response);
    }
    return response;
}

//se retornar -1 é pq mensagem nao esta na substring
int temCoisaErrada(String string, String mensagem)
{
  return string.indexOf(mensagem);
}

String retornaSubstring(String string, String comeco, String fim)
{
  int inicioRes = string.indexOf(comeco) + 6;
  int finalRes = string.indexOf(fim) - 1;
  return string.substring(inicioRes, finalRes + 1);
} 


void zeraExibir()
{
    for(int j = 0; j < tam; j++)
    {
        exibir[j] = ' ';
    }
}

//preenche questões não respondidas com '0' 
void zeraResto()
{
    for(int j = 1; j <= num; j++)
    {
        if (exibir[j] == ' ') exibir[j] = '0';
    }
}

void exibirRespostas()
{
    int inc = 1;
    lcd.clear();

    if(i > num - 5)
    {
      for(int j = i; j <= num; j++)
      {
        lcd.setCursor(inc,0);
        lcd.print(j);
        lcd.setCursor(inc,1);
        lcd.print(exibir[j]);
        inc += 3;
      }
    }
    else
    {
      for(int j = i; j < i+5; j++)
      {
        lcd.setCursor(inc,0);
        lcd.print(j);
        lcd.setCursor(inc,1);
        lcd.print(exibir[j]);
        inc += 3;
      } 
    }
}

void takeNumber()
{   
    indice = 0;
    int sair = 0;
    do{
        do{
          key = keypad1.getKey();
        }while(key == NO_KEY);
          
        if(key >= '0' && key <= '9')
        {
          indice = indice*10 + (key - '0');
          estado = 4;
          lcd.setCursor(13,0);
          lcd.print(indice);

          if(indice > num) 
          {
            estado = 3;
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print("entrada invalida");
            lcd.setCursor(0,1);
            lcd.print("digite novamente");
            delay(1500);
            sair = 1;
          }
        }
        else if(key == '/') 
        {
          sair = 1;
          if(indice < 1) 
          {
            estado = 3;
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print("entrada invalida");
            lcd.setCursor(0,1);
            lcd.print("digite novamente");
            delay(1500);  
          }
        }
        else if(key == 'c')
        {
          indice = 0;
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("respondida:     ");
        }
        else
        {
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("entrada invalida");
          lcd.setCursor(0,1);
          lcd.print("digite novamente");
          delay(1500);
          sair = 1;
          estado = 3;
        }
     }while(!sair);   
}

void takeLetter()
{
    int sair = 0;
    do{
        do{
          key = keypad2.getKey();
        }while(key == NO_KEY);
          
        if(key >= 'A' && key <= 'E')
        {
          exibir[indice] = key;
          estado = 5;
          lcd.setCursor(12,1);
          lcd.print(key);
        }
        else if(key == '/' && exibir[indice] != ' ') 
        {
          sair = 1;
          estado = 5;
        }
        else
        {
          lcd.setCursor(0,0);
          lcd.print("entrada invalida");
          lcd.setCursor(0,1);
          lcd.print("digite novamente");
          delay(1500);
          sair = 1;
          estado = 4;
        }
     }while(!sair);  
}

void zeraChar(char vetor[])
{
  for(i = 0; i < 20; i++)
  {
    vetor[i] = ' ';
  }
}

void login_senha_id(char info[])
{   
    String printar;
    indice = 0;
    int sair = 0;
    char aux = '/';
    do{
        do{
          key = keypad1.getKey();
        }while(key == NO_KEY);
          
        if((key >= '0' && key <= '9') || (key >= 'A' && key <= 'D'))
        {
          info[indice] = key;
          lcd.clear();
          lcd.setCursor(0,0);
          printar = info;
          lcd.print(printar);
          indice++;
        }
        else if(key == '/') 
        {
            if(aux != '/')  sair = 1;
        }
        else if(key == 'c')
        {
          zeraChar(info);
          indice = 0;
          lcd.clear();
          lcd.setCursor(0,0);
        }
        aux = key;
     }while(!sair);
     info[indice] =  '\0';
}

//pega opção inicial
void take_op()
{ 
  int sair = 0;
  char aux;
  do{                        
          lcd.setCursor(0,0);
          lcd.print("configuracoes   "); 
          lcd.setCursor(0,1);
          lcd.print("anteriores?");

          do{
            key = keypad1.getKey();
          }while(key == NO_KEY);
            
          if(key == '0')
          {
            estado = 10;
            lcd.setCursor(13,1);
            lcd.print(key);
          }
          else if(key == '1') 
          {
            estado = 8;
            lcd.setCursor(13,1);
            lcd.print(key);
          }
          else if(key == 'c')
          {
            lcd.setCursor(13,1);
            lcd.print(" ");
          }
          else if(key == '/')
          {
            if(aux == '0' || aux == '1')
            {
              sair = 1;
            }
            else
            {
              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("Entrada invalida");
              lcd.setCursor(0,1);
              lcd.print("Digite novamente");
              
              delay(1500);
              lcd.clear();
            }
          }
          else
          {
            lcd.setCursor(13,1);
            lcd.print(key);
          }
          aux = key;
       }while(!sair);   
}
//escreve login e senha no arquivo
void write_arq(char login[], char senha[])
{
      flag = true;
      Serial.print("Probando SD card...");
      //pinMode(10, OUTPUT);         // Esto es necesario aunque creas que no lo usas.
      
      while(!SD.begin(4))//4 indica que é um sd
      {  Serial.println("No hay tarjeta");
              //return;    // NO sigas
      }
      
      Serial.println("Sd encontrada.");
      if (SD.exists("data.txt"))   SD.remove("data.txt");
      
      File dataFile = SD.open("data.txt", FILE_WRITE);
      if (dataFile)   // Si ha podido abrir el fichero
      {    
          dataFile.println(login);
          dataFile.println(senha); 
          dataFile.close();  
      }                  
}

void read_arq(char login[], char senha[])
{
      Serial.print("Probando SD card...");
      //pinMode(10, OUTPUT);         // Esto es necesario aunque creas que no lo usas.

      if(flag == false)
      {
        while(!SD.begin(4))//4 indica que é um sd
        {  Serial.println("No hay tarjeta");
              //return;    // NO sigas
        }
      }
      
      
      Serial.println("Sd encontrada.");
      File dataFile = SD.open("data.txt");
      if (dataFile)   // Si ha podido abrir el fichero
      {    
          int sair = 0;
          int i = 0;
          char aux;
          //lê o login
          while (!sair)             
          {     
                aux = dataFile.read();
                //Serial.println(aux1);
                if(aux != 13 && aux != 10)
                {
                    login[i] = aux;
                    //Serial.println(login[i]);
                    i++;
                }
                if(aux == 10)
                {
                  sair = 1;
                }    
           }
           i = 0;
           //Lê a senha
           while (dataFile.available())              // Mientras no llegues al final
           {
                aux = dataFile.read();
                
                senha[i] = aux;
                i++;
           }                  
        dataFile.close();                         // Cierra el fichero al acabar
      }
      else     // SI no puede abrir el fichero
           Serial.println("Error, no puedo usar indes.htm");
}  

void connectToWifi()
{
  esp8266.begin(9600); // esp's baud rate might be different

  String Login1 = login;
  String Senha1 = senha;

  Serial.println(Login1);
  Serial.println(Senha1);

  String resu = "";
  
  sendData("AT+RST\r\n",2000,true); // reset module
  sendData("AT+CIOBAUD=9600\r\n", 1000, true);  //set baud
  sendData("AT+CWMODE=3un\r\n",1000,true); // configure as station
  sendData("AT+CWLAP\r\n", 2000,true); // show available network
  sendData("AT+CWJAP=\""+Login1+"\",\""+Senha1+"\"\r\n", 2000, true); //connect to internet
  resu = sendData("AT+CIFSR\r\n", 2000, true); // show IP adress
  Serial.print("Resultado: ");
  Serial.print(resu);

  sendData("AT+CWJAP=\""+Login1+"\",\""+Senha1+"\"\r\n", 4000, true);  //try to connect to internet
  resu = sendData("AT+CIFSR\r\n", 2000, true); // show IP adress
 
  while(!(temCoisaErrada(resu, "0.0.0.0") == -1))
  {
    sendData("AT+CWJAP=\""+Login1+"\",\""+Senha1+"\"\r\n", 4000, true); //try to connect to internet
    resu = sendData("AT+CIFSR\r\n", 2000, true); // show IP adress
    Serial.print("Resultado: ");
    Serial.print(resu);
  }  
}

void carregarDadosProva()
{
  //Server connection 
  String cdProva = codProva;
  Serial.println("TestE");
  Serial.println(cdProva);
  String cmd = "GET http://capp-3.apphb.com/API/PegarProva?codigo=";
  cmd = cmd + cdProva + "\r\n";
  //sendData("AT+CWMODE=3\r\n",1000,true); // configure as station and ap
  sendData("AT+CIPSTART=\"TCP\",\"50.17.211.206\",80\r\n", 2000, true); //connect to server CApp
  sendData("AT+CIPSEND=" + String(cmd.length()) + "\r\n", 2000, true); //length of data 
  String completo = sendData(cmd, 2000, true); //send data
  Serial.println("Imprimindo: ");
  Serial.println(completo);

  //em completo esta a string completa contendo ID da prova, nome e quantidade de questoes

  //Pega o ID da prova como String
  provaID = retornaSubstring(completo, "{\"ID\":", ",\"Nome\":\"");
  Serial.println(provaID);

  //Pega o nome da prova como String
  nomeProva = retornaSubstring(completo, "ome\":\"", "\",\"QtdQuestoes");
  Serial.println(nomeProva);

   //Pega a quantidade de questoes da prova como String
  String qtdQuestoes = retornaSubstring(completo, "toes\":", "}CLOSED");
  Serial.println(qtdQuestoes);
  //Transforma a quantidade de questoes de String para 
  char string2[qtdQuestoes.length() + 1];
  qtdQuestoes.toCharArray(string2, qtdQuestoes.length()+1);
  int valor = 0;
  int sair = 0;
  int i = 0;
  do{        
        valor = valor*10 + (string2[i] - '0');
        i++; 
        if (i == qtdQuestoes.length())
          sair = 1;
   }while(!sair); 
  Serial.println(valor);

  num = valor;
  
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Prova de");
  lcd.setCursor(0,1);
  lcd.print(nomeProva);
}

void enviarServidor()
{
  //deixando estatico para testes
    
  String alunoID = IdAluno;

  zeraResto();//zerando questões não respondidas

  respostasProva();//formando string de respostas
  
  // Create GET
  String cmd = "GET http://capp-3.apphb.com/API/Responder?provaID=";
  cmd+= provaID;
  cmd+= "&aluno=";
  cmd+= alunoID;
  cmd+= "&respostas=";
  cmd+= respostas;
  cmd+= "\r\n";
//
 // String conexao_status;
//  // Send GET to server
  sendData("AT+CIPSTART=\"TCP\",\"50.17.211.206\",80\r\n", 2000, true); //connect to server CApp
  String conexao_status = sendData("AT+CIPSTATUS\r\n", 1000, true); //connect to server CApp
  
  while(temCoisaErrada(conexao_status, "3") == -1)
  {
    sendData("AT+CIPSTART=\"TCP\",\"50.17.211.206\",80\r\n", 2000, true); //try to connect to server CApp again
    conexao_status = sendData("AT+CIPSTATUS\r\n", 1000, true); //connect to server CApp
  }
  sendData("AT+CIPSEND=" + String(cmd.length()) + "\r\n", 2000, true); //length of data 
  String completo = sendData(cmd, 4000, true); //send data
  Serial.print("Respostas enviadas: ");
  Serial.println(completo);
  //sendData("AT+CWQAP\r\n", 2000, true); //disconnect from AP
}

void respostasProva()
{ 
  char aux;

  for(i=1; i<=num; i++)
  {
     aux = i + 49;
     respostas = respostas + aux + exibir[i];
  }
}

void setup()
{
  Serial.begin(9600);
  //while(!Serial);
  lcd.begin(16, 2); //Inicia o LCD com dimensões 16x2(Colunas x Linhas)
  zeraExibir();
}

void loop()
{
    

    //scanf("%d", &num);

    switch(estado)
    {
      case 1:
              //baixar prova
              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("baixando prova..");

              carregarDadosProva();
             
              lcd.setCursor(0,0);
              lcd.print("Prova de ");
              lcd.setCursor(0,1);
              lcd.print(nomeProva);
              delay(1500);

              i = 1;
                
              estado = 2;
              break;

      case 2:
              //responder ou entregar
              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("Aperte o botao  ");
              lcd.setCursor(0,1);
              lcd.print("para responder  ");
              delay(1500);
              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("as questoes.    ");
                  
              do{
                 key = keypad2.getKey();
              }while(key != '/' && key != 'E');
              
              if(key == '/') estado = 3;
              else if(key == 'E') estado = 6;
              
              delay(1500);
              
              break;
            
      case 3:   
              //pegar numero da questão
              lcd.clear();      
              lcd.setCursor(0,0);
              lcd.print("Digite o numero ");
              lcd.setCursor(0,1);
              lcd.print("da questao a ser");
              delay(1500);
              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("respondida:     ");

              takeNumber();
                           
              break;

      case 4:
              //pegar resposta da questao
              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("Digite a        ");
              lcd.setCursor(0,1);
              lcd.print("resposta :      ");
       
              takeLetter();
              
              break;
      case 5:
              //tela de exibição
              exibirRespostas();

              do{
                key = keypad2.getKey();
              }while(key == NO_KEY);
              
              if(key == '/') estado = 3;
              else if(key == 'E') estado = 6;
              else if(key == '<' && i > 5) i = i - 5;
              else if(key == '>' && i <= num - 5) i = i + 5;
              
              delay(200);
              
              break;
      case 6:
              //finalizar prova
              lcd.setCursor(0,0);
              lcd.print("Tem certeza que");
              lcd.setCursor(0,1);
              lcd.print("quer finalizar?");

              do{
                key = keypad1.getKey();
              }while(key == NO_KEY);

              if(key == '/') estado = 7;
              else if(key == 'c') estado = 5;
              else estado = 6;         
              
              break;
      case 7:
              //enviar respostas p servidor
              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("enviando...");

              enviarServidor();

              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("fim de prova    ");
              lcd.setCursor(0,1);
              lcd.print("boa sorte!      ");

              while(1);

              break;
      case 8:

              //pegar login da rede
              lcd.setCursor(0,0);
              lcd.clear();
              lcd.print("Digite o login  ");
              lcd.setCursor(0,1);
              lcd.print("da rede:        ");
              
              login_senha_id(login);

              estado = 9;
              
              break;
      case 9:
              //pegar senha da rede
              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("Digite a senha");
              lcd.setCursor(0,1);
              lcd.print("da rede:");

              login_senha_id(senha); 
              
              write_arq(login,senha);
              Serial.println("before");
              Serial.print(login);
              Serial.print(senha);
                           
              estado = 10;
              
              break;

       case 10:
              //conectar           
              read_arq(login,senha);

              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("conectando...");
              
              connectToWifi();
              
              estado = 11;
              break;
              
       case 11:
              //pegar IDaluno
              zeraChar(IdAluno);
              zeraChar(IdAluno2);
              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("Digite seu ID:");
              
              login_senha_id(IdAluno);
              Serial.println(IdAluno);

              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("Digite novamente");
              
              login_senha_id(IdAluno2);
              Serial.println(IdAluno2);

              if(strcmp(IdAluno,IdAluno2) == 0 && strlen(IdAluno) == 11)
              {
                estado = 12;
              }
              else
              {
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print("ID invalido");
                delay(1500);

                estado = 11;
              }

              
             
              break;

       case 12:
              //pegar codigo da prova
              zeraChar(codProva);
              zeraChar(codProva2);
              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("Digite o codigo");
              lcd.setCursor(0,1);
              lcd.print("da prova: ");
            
              login_senha_id(codProva);
              Serial.print(codProva);

              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("Digite novamente");
              
              login_senha_id(codProva2);
              Serial.print(codProva2);

              if(strcmp(codProva,codProva2) == 0)
              {
                estado = 1;
              }
              else
              {
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print("Codigo da prova");
                lcd.setCursor(0,1);
                lcd.print("nao confere");
                delay(1500);

                estado = 12;
              }
               break;

       case 13:
              //tela inicial
              lcd.setCursor(0,0);
              lcd.print("Deseja fazer");
              lcd.setCursor(0,1);
              lcd.print("login ou usar as");
              delay(2000);
              lcd.clear();
              lcd.setCursor(0,0);
              lcd.print("configuracoes"); 
              lcd.setCursor(0,1);
              lcd.print("anteriores?");
                        
              take_op();
                 
              break;
                      
      default:
            estado = 5;
    }
}


